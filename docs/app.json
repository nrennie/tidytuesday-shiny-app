[{"name":"app.R","content":"library(shiny)\r\nlibrary(dplyr)\r\nlibrary(htmltools)\r\nlibrary(glue)\r\nlibrary(rlang)\r\nlibrary(shinythemes)\r\nlibrary(shinyWidgets)\r\n\r\n# Data\r\nload(url(\"https://raw.githubusercontent.com/nrennie/tidytuesday/main/data/all_weeks.RData\"))\r\nall_titles <- all_weeks$title\r\nlong_pkgs <- all_weeks |>\r\n  dplyr::select(code_type, pkgs) |>\r\n  tidyr::separate_longer_delim(pkgs, \", \") |>\r\n  dplyr::distinct() |>\r\n  dplyr::arrange(code_type, stringr::str_to_lower(pkgs))\r\npkg_choices <- c(list(\"Any package\" = list(\"Any package\")), lapply(split(long_pkgs$pkgs, long_pkgs$code_type), as.list))\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n\r\n  theme = shinytheme(\"darkly\"),\r\n\r\n  titlePanel(\"#TidyTuesday\"),\r\n\r\n  sidebarLayout(\r\n\r\n    sidebarPanel(\r\n      markdown(\"[Nicola Rennie](https://github.com/nrennie)\r\n\r\n#TidyTuesday is a weekly data challenge where each week a new dataset is posted alongside a chart or article related to that dataset, and participants are asked to explore the data. You can access the data and find out more on [GitHub](https://github.com/rfordatascience/tidytuesday/blob/master/README.md).\r\n\r\nMy contributions can be found on [GitHub](https://github.com/nrennie/tidytuesday), and you can use this Shiny app to explore my visualisations with links to code for each individual plot. You can also follow my attempts on Mastodon at [fosstodon.org/@nrennie](https://fosstodon.org/@nrennie).\r\n\"),\r\nhtmltools::hr(),\r\nshinyWidgets::pickerInput(\r\n  inputId = \"pkg_select\",\r\n  \"Only show plots that use:\",\r\n  choices = pkg_choices\r\n),\r\n# choose a plot\r\nshiny::uiOutput(\"select_img\"),\r\n# display information\r\nshiny::textOutput(\"pkgs_used\"),\r\nhtmltools::br(),\r\nshiny::htmlOutput(\"code_link\"),\r\nhtmltools::br(),\r\nshiny::htmlOutput(\"r4ds_link\"),\r\nhtmltools::br(),\r\nwidth = 6\r\n    ),\r\n\r\nmainPanel(\r\n  shiny::htmlOutput(\"plot_img\"),\r\n  htmltools::br(),\r\n  width = 6\r\n)\r\n  )\r\n)\r\n\r\nserver <- function(input, output) {\r\n  # Get data\r\n  all_titles <- reactive({\r\n    req(input$pkg_select)\r\n    if (input$pkg_select == \"Any package\") {\r\n      all_titles <- all_weeks$title\r\n    } else {\r\n      all_titles <- all_weeks %>%\r\n        dplyr::filter(!!rlang::sym(input$pkg_select) == 1) %>%\r\n        dplyr::pull(title)\r\n    }\r\n  })\r\n\r\n  # Select title\r\n  output$select_img <- renderUI({\r\n    shinyWidgets::pickerInput(\r\n      inputId = \"plot_title\",\r\n      \"Select a plot:\",\r\n      choices = rev(all_titles())\r\n    )\r\n  })\r\n\r\n  # Get data\r\n  week_data <- reactive({\r\n    req(input$plot_title)\r\n    dplyr::filter(all_weeks, title == input$plot_title)\r\n  })\r\n\r\n  ## Image display\r\n  img_path <- shiny::reactive({\r\n    glue::glue(\"https://raw.githubusercontent.com/nrennie/tidytuesday/main/{week_data()$img_fpath}\")\r\n  })\r\n\r\n  output$plot_img <- shiny::renderText({\r\n    c('<img src=\"', img_path(), '\" width=\"100%\">')\r\n  })\r\n\r\n  ### List of packages\r\n  output$pkgs_used <- shiny::renderText({\r\n    glue::glue(\r\n      \"This plot uses the following packages: {week_data()$pkgs}\"\r\n    )\r\n  })\r\n\r\n  ### Code link\r\n  code_path <- shiny::reactive({\r\n    glue::glue(\r\n      \"https://github.com/nrennie/tidytuesday/tree/main/{week_data()$code_fpath}\"\r\n    )\r\n  })\r\n\r\n  output$code_link <- shiny::renderText({\r\n    glue::glue(\r\n      '<b>Code is available at<\/b>: <a href=\"{code_path()}\"  target=\"_blank\">{code_path()}<\/a>.'\r\n    )\r\n  })\r\n\r\n  ### R4DS link\r\n  r4ds_path <- shiny::reactive({\r\n    if (week_data()$year == \"2021\") {\r\n      reformat_week <- as.character(as.Date(week_data()$week, format = \"%d-%m-%Y\"))\r\n      glue::glue(\r\n        \"https://github.com/rfordatascience/tidytuesday/blob/master/data/{week_data()$year}/{reformat_week}/readme.md\"\r\n      )\r\n    } else {\r\n      glue::glue(\r\n        \"https://github.com/rfordatascience/tidytuesday/blob/master/data/{week_data()$year}/{week_data()$week}/readme.md\"\r\n      )\r\n    }\r\n  })\r\n\r\n  output$r4ds_link <- shiny::renderText({\r\n    glue::glue('<b>R4DS GitHub link<\/b>: <a href=\"{r4ds_path()}\"  target=\"_blank\">{r4ds_path()}<\/a>.')\r\n  })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
